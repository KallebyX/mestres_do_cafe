#!/usr/bin/env python3
"""
Script simples para popular o banco de dados
"""

import sqlite3
import hashlib
from datetime import datetime

def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()

def main():
    # Conectar ao banco
    conn = sqlite3.connect('mestres_cafe.db')
    cursor = conn.cursor()
    
    print("üöÄ Populando banco de dados...")
    
    # Limpar dados existentes se necess√°rio
    try:
        cursor.execute("DELETE FROM products")
        cursor.execute("DELETE FROM users")
        cursor.execute("DELETE FROM categories")
        print("üßπ Dados antigos removidos")
    except Exception as e:
        print(f"‚ÑπÔ∏è  Erro ao limpar (normal): {e}")
    
    # Inserir categorias
    categories = [
        (1, 'Caf√© em Gr√£os', 'cafe-em-graos', 'Gr√£os de caf√© frescos'),
        (2, 'Caf√© Mo√≠do', 'cafe-moido', 'Caf√© mo√≠do fresco'),
        (3, 'Caf√© Especial', 'cafe-especial', 'Caf√©s especiais premium'),
        (4, 'Acess√≥rios', 'acessorios', 'Acess√≥rios para caf√©')
    ]
    
    try:
        cursor.executemany(
            "INSERT INTO categories (id, name, slug, description) VALUES (?, ?, ?, ?)",
            categories
        )
        print(f"‚úÖ Criadas {len(categories)} categorias")
    except Exception as e:
        print(f"‚ùå Erro nas categorias: {e}")
    
    # Inserir produtos
    products = [
        (1, 'Caf√© Bourbon Santos Premium', 'cafe-bourbon-santos', 'Caf√© especial da regi√£o de Santos', 45.90, 500, 1, 100, 1, 1),
        (2, 'Caf√© Mogiana Especial', 'cafe-mogiana', 'Caf√© da regi√£o da Mogiana', 52.90, 500, 3, 75, 1, 1),
        (3, 'Caf√© Org√¢nico Cerrado', 'cafe-organico-cerrado', 'Caf√© org√¢nico certificado', 48.90, 500, 1, 50, 0, 1),
        (4, 'Moedor Manual Premium', 'moedor-manual', 'Moedor manual com l√¢minas cer√¢micas', 89.90, 800, 4, 25, 1, 1),
        (5, 'X√≠cara Porcelana', 'xicara-porcelana', 'X√≠cara de porcelana premium', 24.90, 200, 4, 40, 0, 1)
    ]
    
    try:
        cursor.executemany(
            "INSERT INTO products (id, name, slug, description, price, weight, category_id, stock_quantity, is_featured, is_active) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
            products
        )
        print(f"‚úÖ Criados {len(products)} produtos")
    except Exception as e:
        print(f"‚ùå Erro nos produtos: {e}")
    
    # Inserir usu√°rios
    users = [
        (1, 'admin@mestres.cafe', hash_password('admin123'), 'Administrador Mestres', 'admin', 1, 1),
        (2, 'cliente@mestres.cafe', hash_password('cliente123'), 'Cliente Teste', 'customer', 1, 1),
        (3, 'maria.silva@email.com', hash_password('senha123'), 'Maria Silva Santos', 'customer', 1, 1)
    ]
    
    try:
        cursor.executemany(
            "INSERT INTO users (id, email, password_hash, full_name, user_type, is_active, is_verified) VALUES (?, ?, ?, ?, ?, ?, ?)",
            users
        )
        print(f"‚úÖ Criados {len(users)} usu√°rios")
    except Exception as e:
        print(f"‚ùå Erro nos usu√°rios: {e}")
    
    # Commit e fechar
    conn.commit()
    conn.close()
    
    print("\nüìä RESUMO:")
    print(f"   üìÅ Categorias: {len(categories)}")
    print(f"   üì¶ Produtos: {len(products)}")
    print(f"   üë• Usu√°rios: {len(users)}")
    print("\n‚úÖ Banco populado com sucesso!")
    print("\nüîê CREDENCIAIS:")
    print("   Admin: admin@mestres.cafe / admin123")
    print("   Cliente: cliente@mestres.cafe / cliente123")
    print("   Maria: maria.silva@email.com / senha123")

if __name__ == "__main__":
    main()