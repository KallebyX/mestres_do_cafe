name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.13'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ============================================================================
  # AN√ÅLISE DE C√ìDIGO E SEGURAN√áA
  # ============================================================================
  
  code-analysis:
    name: üîç An√°lise de C√≥digo
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Instalar pnpm
        run: npm install -g pnpm
      
      - name: Cache depend√™ncias Node
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-
      
      - name: Instalar depend√™ncias
        run: pnpm install --frozen-lockfile
      
      - name: Lint Frontend
        run: |
          cd apps/web
          pnpm lint
      
      - name: Lint Backend
        run: |
          cd apps/api
          python -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt
          pip install flake8 black pylint bandit safety
          flake8 src/
          black --check src/
          pylint src/
      
      - name: An√°lise de Seguran√ßa - Frontend
        run: |
          cd apps/web
          pnpm audit --audit-level moderate
      
      - name: An√°lise de Seguran√ßa - Backend
        run: |
          cd apps/api
          source venv/bin/activate
          bandit -r src/
          safety check
      
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      
      - name: CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: javascript, python
      
      - name: Autobuild
        uses: github/codeql-action/autobuild@v2
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  # ============================================================================
  # TESTES UNIT√ÅRIOS E INTEGRA√á√ÉO
  # ============================================================================
  
  test-frontend:
    name: üß™ Testes Frontend
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16, 18, 20]
    
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      
      - name: Instalar pnpm
        run: npm install -g pnpm
      
      - name: Instalar depend√™ncias
        run: |
          pnpm install --frozen-lockfile
          cd apps/web && pnpm install
      
      - name: Executar testes unit√°rios
        run: |
          cd apps/web
          pnpm test:coverage
      
      - name: Executar testes de componentes
        run: |
          cd apps/web
          pnpm test:components
      
      - name: Upload cobertura para Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./apps/web/coverage/lcov.info
          flags: frontend
          name: frontend-coverage
  
  test-backend:
    name: üß™ Testes Backend
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.11', '3.12', '3.13']
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: mestres_cafe_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4
      
      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Instalar depend√™ncias
        run: |
          cd apps/api
          python -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-mock pytest-asyncio
      
      - name: Executar testes unit√°rios
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/mestres_cafe_test
          REDIS_URL: redis://localhost:6379/0
          FLASK_ENV: testing
        run: |
          cd apps/api
          source venv/bin/activate
          pytest tests/unit/ -v --cov=src --cov-report=xml --cov-report=html
      
      - name: Executar testes de integra√ß√£o
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/mestres_cafe_test
          REDIS_URL: redis://localhost:6379/0
          FLASK_ENV: testing
        run: |
          cd apps/api
          source venv/bin/activate
          pytest tests/integration/ -v
      
      - name: Upload cobertura para Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./apps/api/coverage.xml
          flags: backend
          name: backend-coverage

  # ============================================================================
  # TESTES END-TO-END
  # ============================================================================
  
  test-e2e:
    name: üé≠ Testes E2E
    runs-on: ubuntu-latest
    needs: [test-frontend, test-backend]
    
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Instalar depend√™ncias
        run: |
          npm install -g pnpm
          pnpm install --frozen-lockfile
      
      - name: Construir aplica√ß√£o
        run: |
          cd apps/web
          pnpm build
      
      - name: Iniciar servi√ßos
        run: |
          docker-compose -f docker-compose.test.yml up -d
          sleep 30
      
      - name: Executar testes E2E
        run: |
          cd tests/e2e
          pnpm install
          pnpm test
      
      - name: Upload screenshots de falhas
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: e2e-screenshots
          path: tests/e2e/screenshots/
      
      - name: Parar servi√ßos
        if: always()
        run: docker-compose -f docker-compose.test.yml down

  # ============================================================================
  # TESTES DE PERFORMANCE
  # ============================================================================
  
  performance-tests:
    name: ‚ö° Testes de Performance
    runs-on: ubuntu-latest
    needs: [test-frontend, test-backend]
    
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Instalar depend√™ncias
        run: |
          npm install -g pnpm
          pnpm install --frozen-lockfile
      
      - name: Construir aplica√ß√£o
        run: |
          cd apps/web
          pnpm build
      
      - name: Iniciar aplica√ß√£o
        run: |
          docker-compose up -d
          sleep 30
      
      - name: Lighthouse CI
        run: |
          npm install -g @lhci/cli
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
      
      - name: Load Testing com Artillery
        run: |
          npm install -g artillery
          artillery run tests/performance/load-test.yml
      
      - name: Bundle Size Analysis
        run: |
          cd apps/web
          pnpm analyze
      
      - name: Parar aplica√ß√£o
        if: always()
        run: docker-compose down

  # ============================================================================
  # BUILD E DEPLOY
  # ============================================================================
  
  build:
    name: üèóÔ∏è Build
    runs-on: ubuntu-latest
    needs: [code-analysis, test-frontend, test-backend]
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4
      
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login no Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extrair metadados
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build e push da imagem
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            NODE_VERSION=${{ env.NODE_VERSION }}
            PYTHON_VERSION=${{ env.PYTHON_VERSION }}

  # ============================================================================
  # DEPLOY PARA STAGING
  # ============================================================================
  
  deploy-staging:
    name: üöÄ Deploy Staging
    runs-on: ubuntu-latest
    needs: [build, test-e2e]
    if: github.ref == 'refs/heads/develop'
    
    environment:
      name: staging
      url: https://staging.mestres-cafe.com
    
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4
      
      - name: Deploy para staging
        run: |
          echo "Deploying to staging environment..."
          # Aqui voc√™ adicionaria os comandos espec√≠ficos do seu provedor
          # Exemplo para AWS ECS, Kubernetes, etc.
      
      - name: Executar smoke tests
        run: |
          curl -f https://staging.mestres-cafe.com/health || exit 1
          curl -f https://staging.mestres-cafe.com/api/health || exit 1
      
      - name: Notificar Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # ============================================================================
  # DEPLOY PARA PRODU√á√ÉO
  # ============================================================================
  
  deploy-production:
    name: üåü Deploy Produ√ß√£o
    runs-on: ubuntu-latest
    needs: [build, test-e2e, performance-tests]
    if: github.event_name == 'release'
    
    environment:
      name: production
      url: https://mestres-cafe.com
    
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4
      
      - name: Deploy para produ√ß√£o
        run: |
          echo "Deploying to production environment..."
          # Comandos de deploy para produ√ß√£o
      
      - name: Executar smoke tests
        run: |
          curl -f https://mestres-cafe.com/health || exit 1
          curl -f https://mestres-cafe.com/api/health || exit 1
      
      - name: Atualizar monitoramento
        run: |
          # Atualizar dashboards, alertas, etc.
          echo "Updating monitoring dashboards..."
      
      - name: Notificar equipe
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#general'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          text: |
            üéâ Nova vers√£o em produ√ß√£o!
            Vers√£o: ${{ github.event.release.tag_name }}
            URL: https://mestres-cafe.com

  # ============================================================================
  # LIMPEZA E NOTIFICA√á√ïES
  # ============================================================================
  
  cleanup:
    name: üßπ Limpeza
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
      - name: Limpar imagens antigas
        run: |
          echo "Cleaning up old images..."
          # Comandos para limpar imagens antigas do registry
      
      - name: Gerar relat√≥rio
        run: |
          echo "Generating deployment report..."
          # Gerar relat√≥rio de deployment
      
      - name: Atualizar documenta√ß√£o
        if: github.ref == 'refs/heads/main'
        run: |
          echo "Updating documentation..."
          # Atualizar documenta√ß√£o autom√°tica

