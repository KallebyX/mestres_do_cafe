# Regras de Engenharia de Contexto para Claude 4 Sonnet

## Princípios Fundamentais de Context Engineering

### Princípio 1: Compartilhamento de Contexto Completo
- Sempre compartilhe contexto completo e traces completos do agente
- Não envie apenas mensagens individuais isoladas
- Mantenha histórico de decisões e raciocínio
- Preserve estado entre interações

### Princípio 2: Decisões Implícitas em Ações
- Reconheça que ações carregam decisões implícitas
- Evite decisões conflitantes que geram resultados ruins
- Mantenha coerência nas escolhas arquiteturais
- Documente o raciocínio por trás das decisões

## Configuração para Projeto Mestres do Café

### Contexto do Projeto
Este é um sistema enterprise de e-commerce e ERP para torrefação artesanal de cafés especiais, estruturado como monorepo com:

- **Frontend**: React 18 + TypeScript + Vite + Tailwind CSS
- **Backend**: Flask + Python 3.9+ + SQLAlchemy
- **Database**: PostgreSQL (produção) / SQLite (desenvolvimento)
- **DevOps**: Docker + GitHub Actions + Render

### Padrões de Código

#### TypeScript/React
- Use TypeScript estrito com tipos explícitos
- Componentes funcionais com hooks
- Props interfaces bem definidas
- Error boundaries para componentes críticos
- Testes unitários obrigatórios

#### Python/Flask
- Type hints obrigatórios
- Docstrings em formato Google
- Separação clara entre controllers, services e models
- Validação de entrada com Pydantic
- Testes de integração para APIs

#### Arquitetura
- Clean Architecture com separação de responsabilidades
- Domain Driven Design por contextos de negócio
- Repository pattern para acesso a dados
- Dependency injection onde aplicável

### Regras de Engenharia de Contexto

#### Para Refatoração
1. Sempre analise o contexto completo antes de sugerir mudanças
2. Considere impactos em todo o sistema, não apenas no arquivo atual
3. Mantenha consistência com padrões existentes
4. Documente mudanças significativas

#### Para Debugging
1. Analise logs e traces completos
2. Considere estado da aplicação e dependências
3. Verifique configurações de ambiente
4. Teste em contexto similar ao problema

#### Para Novas Features
1. Entenda requisitos de negócio completos
2. Considere impactos em performance e segurança
3. Mantenha compatibilidade com APIs existentes
4. Implemente testes desde o início

### Integração com Model Context Protocol

#### Configuração MCP
- Use servidores MCP para acesso a dados externos
- Mantenha conexões seguras e autenticadas
- Implemente fallbacks para indisponibilidade
- Monitore performance das integrações

#### Servidores MCP Recomendados
- **Git**: Para operações de repositório
- **Filesystem**: Para operações de arquivo seguras
- **PostgreSQL**: Para consultas de banco
- **Memory**: Para sistema de conhecimento persistente

### Boas Práticas de Prompt Engineering

#### Estrutura de Prompts
1. **Contexto**: Forneça contexto completo do problema
2. **Objetivo**: Defina claramente o que precisa ser feito
3. **Restrições**: Liste limitações e requisitos
4. **Exemplos**: Forneça exemplos quando relevante
5. **Formato**: Especifique formato de saída esperado

#### Manutenção de Estado
- Mantenha contexto entre interações
- Preserve decisões arquiteturais
- Documente mudanças de estado
- Use memória persistente quando necessário

### Configurações Específicas do Cursor

#### Extensões Recomendadas
- ESLint + Prettier para formatação
- TypeScript Hero para imports
- Python extension pack
- Docker extension
- GitLens para histórico

#### Configurações de Workspace
- Auto-save habilitado
- Format on save ativo
- Type checking rigoroso
- Lint on save habilitado

### Segurança e Compliance

#### Dados Sensíveis
- Nunca exponha credenciais em código
- Use variáveis de ambiente para configurações
- Implemente sanitização de inputs
- Mantenha logs sem dados pessoais

#### Auditoria
- Mantenha logs de todas as operações críticas
- Implemente rastreamento de mudanças
- Use versionamento semântico
- Documente decisões de segurança

### Performance e Monitoramento

#### Métricas Importantes
- Tempo de resposta das APIs
- Uso de memória e CPU
- Taxa de erro por endpoint
- Tempo de build e deploy

#### Otimizações
- Lazy loading para componentes React
- Indexação adequada no banco
- Cache em múltiplas camadas
- Compressão de assets estáticos

### Tratamento de Erros

#### Frontend
- Error boundaries para captura de erros React
- Fallbacks graceful para componentes
- Notificações user-friendly
- Retry automático para falhas de rede

#### Backend
- Exception handling estruturado
- Logs detalhados para debugging
- Status codes HTTP apropriados
- Validação de entrada robusta

### Deployment e CI/CD

#### Pipeline
- Testes automatizados obrigatórios
- Build e deploy automatizados
- Rollback automático em falhas
- Monitoramento pós-deploy

#### Ambientes
- Desenvolvimento local com Docker
- Staging para testes de integração
- Produção com alta disponibilidade
- Backup e disaster recovery

Estas regras devem ser seguidas consistentemente para manter a qualidade e confiabilidade do sistema Mestres do Café.

