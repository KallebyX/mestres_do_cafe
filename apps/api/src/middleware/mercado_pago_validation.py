"""
Middleware para valida√ß√£o de dados do MercadoPago
"""

import re
from typing import Dict, List, Tuple, Optional, Any
from functools import wraps
from datetime import datetime, timedelta
from flask import request, jsonify
from utils.logger import logger


class MercadoPagoValidator:
    """Classe com m√©todos de valida√ß√£o para dados do MercadoPago"""

    @staticmethod
    def validate_cpf(cpf: str) -> bool:
        """Valida CPF usando algoritmo oficial"""
        if not cpf or not isinstance(cpf, str):
            return False

        # Remove caracteres n√£o num√©ricos
        cpf = re.sub(r'[^0-9]', '', cpf)

        # Verifica se tem 11 d√≠gitos
        if len(cpf) != 11:
            return False

        # Verifica se todos os d√≠gitos s√£o iguais
        if len(set(cpf)) == 1:
            return False

        # Calcula primeiro d√≠gito verificador
        soma = sum(int(cpf[i]) * (10 - i) for i in range(9))
        resto = soma % 11
        primeiro_digito = 0 if resto < 2 else 11 - resto

        if int(cpf[9]) != primeiro_digito:
            return False

        # Calcula segundo d√≠gito verificador
        soma = sum(int(cpf[i]) * (11 - i) for i in range(10))
        resto = soma % 11
        segundo_digito = 0 if resto < 2 else 11 - resto

        return int(cpf[10]) == segundo_digito

    @staticmethod
    def validate_cnpj(cnpj: str) -> bool:
        """Valida CNPJ usando algoritmo oficial"""
        if not cnpj or not isinstance(cnpj, str):
            return False

        # Remove caracteres n√£o num√©ricos
        cnpj = re.sub(r'[^0-9]', '', cnpj)

        # Verifica se tem 14 d√≠gitos
        if len(cnpj) != 14:
            return False

        # Verifica se todos os d√≠gitos s√£o iguais
        if len(set(cnpj)) == 1:
            return False

        # Calcula primeiro d√≠gito verificador
        cnpj_parcial = cnpj[:12]
        pesos = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2]

        soma = sum(
            int(cnpj_parcial[i]) * pesos[i] for i in range(len(pesos))
        )
        resto = soma % 11
        primeiro_digito = 0 if resto < 2 else 11 - resto

        if int(cnpj[12]) != primeiro_digito:
            return False

        # Calcula segundo d√≠gito verificador
        cnpj_parcial = cnpj[:13]
        pesos = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2]

        soma = sum(int(cnpj_parcial[i]) * pesos[i] for i in range(len(pesos)))
        resto = soma % 11
        segundo_digito = 0 if resto < 2 else 11 - resto

        return int(cnpj[13]) == segundo_digito

    @staticmethod
    def validate_email(email: str) -> bool:
        """Valida formato de email"""
        if not email or not isinstance(email, str):
            return False

        # üêõ CORRE√á√ÉO: Removido espa√ßo em {2, } -> {2,}
        pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
        
        # üîç LOG DIAGN√ìSTICO: Verificar uso no Mercado Pago
        result = re.match(pattern, email) is not None
        logger.warning(f"üîç MERCADO PAGO EMAIL - Input: {email}, "
                      f"Result: {result}")
        
        return result

    @staticmethod
    def validate_card_number(card_number: str) -> Tuple[bool, Optional[str]]:
        """Valida n√∫mero de cart√£o usando algoritmo de Luhn"""
        if not card_number or not isinstance(card_number, str):
            return False, "N√∫mero do cart√£o √© obrigat√≥rio"

        # Remove espa√ßos e h√≠fens
        card_number = re.sub(r'[\s-]', '', card_number)

        # Verifica se cont√©m apenas d√≠gitos
        if not card_number.isdigit():
            return False, "N√∫mero do cart√£o deve conter apenas d√≠gitos"

        # Verifica comprimento (13-19 d√≠gitos)
        if len(card_number) < 13 or len(card_number) > 19:
            return False, "N√∫mero do cart√£o deve ter entre 13 e 19 d√≠gitos"

        # Algoritmo de Luhn
        def luhn_checksum(card_num):
            def digits_of(n):
                return [int(d) for d in str(n)]

            digits = digits_of(card_num)
            odd_digits = digits[-1::-2]
            even_digits = digits[-2::-2]
            checksum = sum(odd_digits)
            for d in even_digits:
                checksum += sum(digits_of(d * 2))
            return checksum % 10

        if luhn_checksum(card_number) != 0:
            return False, "N√∫mero do cart√£o inv√°lido"

        return True, None

    @staticmethod
    def validate_expiry_date(
        month: int, year: int
    ) -> Tuple[bool, Optional[str]]:
        """Valida data de expira√ß√£o do cart√£o"""
        try:
            if not isinstance(month, int) or not isinstance(year, int):
                return False, "M√™s e ano devem ser n√∫meros inteiros"

            if month < 1 or month > 12:
                return False, "M√™s deve estar entre 1 e 12"

            # Ajustar ano se fornecido em formato de 2 d√≠gitos
            if year < 100:
                current_year = datetime.now().year
                if year < (current_year % 100):
                    year += 2100
                else:
                    year += 2000

            # Verificar se n√£o expirou
            now = datetime.now()
            expiry = datetime(year, month, 1)

            if expiry < now.replace(day = 1):
                return False, "Cart√£o expirado"

            return True, None

        except ValueError:
            return False, "Data de expira√ß√£o inv√°lida"

    @staticmethod
    def validate_cvv(
        cvv: str, card_brand: str = None
    ) -> Tuple[bool, Optional[str]]:
        """Valida c√≥digo de seguran√ßa do cart√£o"""
        if not cvv or not isinstance(cvv, str):
            return False, "CVV √© obrigat√≥rio"

        if not cvv.isdigit():
            return False, "CVV deve conter apenas d√≠gitos"

        # American Express usa 4 d√≠gitos, outros usam 3
        if card_brand and card_brand.lower() in ['amex', 'american express']:
            if len(cvv) != 4:
                return False, "CVV deve ter 4 d√≠gitos para American Express"
        else:
            if len(cvv) != 3:
                return False, "CVV deve ter 3 d√≠gitos"

        return True, None


def validate_mercado_pago_payment(f):
    """Decorator para validar dados de pagamento do MercadoPago"""
    @wraps(f)
    def decorated_function(*args, **kwargs):
        try:
            data = request.get_json()

            if not data:
                return jsonify({"error": "Dados n√£o fornecidos"}), 400

            errors = []

            # Valida√ß√µes b√°sicas
            if 'amount' in data:
                try:
                    amount = float(data['amount'])
                    if amount <= 0:
                        errors.append("Valor deve ser maior que zero")
                except (ValueError, TypeError):
                    errors.append("Valor inv√°lido")

            # Validar email do pagador
            if 'payer_email' in data:
                email_valid = MercadoPagoValidator.validate_email(
                    data['payer_email']
                )
                if not email_valid:
                    errors.append("Email do pagador inv√°lido")

            # Validar documento do pagador
            if 'payer_doc_number' in data:
                doc_type = data.get('payer_doc_type', 'CPF')
                doc_number = data['payer_doc_number']

                if doc_type.upper() == 'CPF':
                    if not MercadoPagoValidator.validate_cpf(doc_number):
                        errors.append("CPF inv√°lido")
                elif doc_type.upper() == 'CNPJ':
                    if not MercadoPagoValidator.validate_cnpj(doc_number):
                        errors.append("CNPJ inv√°lido")

            # Valida√ß√µes espec√≠ficas para cart√£o
            payment_method_id = data.get('payment_method_id', '')
            if payment_method_id in ['visa', 'master', 'elo', 'amex']:
                # Campos obrigat√≥rios para cart√£o
                card_fields = [
                    'card_number', 'expiry_month', 'expiry_year', 'cvv'
                ]
                for field in card_fields:
                    if field not in data or not data[field]:
                        if field == 'card_number' and data.get('token'):
                            continue  # Token pode substituir dados do cart√£o
                        else:
                            errors.append(
                                f"Campo '{field}' √© obrigat√≥rio para cart√£o"
                            )

                # Validar dados do cart√£o se fornecidos
                if 'card_number' in data and data['card_number']:
                    card_valid, card_error = (
                        MercadoPagoValidator.validate_card_number(
                            data['card_number']
                        )
                    )
                    if not card_valid:
                        errors.append(card_error)

                if 'expiry_month' in data and 'expiry_year' in data:
                    expiry_valid, expiry_error = (
                        MercadoPagoValidator.validate_expiry_date(
                            int(data['expiry_month']),
                            int(data['expiry_year'])
                        )
                    )
                    if not expiry_valid:
                        errors.append(expiry_error)

                if 'cvv' in data and data['cvv']:
                    cvv_valid, cvv_error = (
                        MercadoPagoValidator.validate_cvv(
                            data['cvv']
                        )
                    )
                    if not cvv_valid:
                        errors.append(cvv_error)

                # Validar parcelas
                if 'installments' in data:
                    try:
                        installments = int(data['installments'])
                        if installments < 1 or installments > 12:
                            errors.append(
                                "N√∫mero de parcelas deve estar entre 1 e 12"
                            )
                    except (ValueError, TypeError):
                        errors.append("N√∫mero de parcelas inv√°lido")

            if errors:
                logger.warning(
                    f"Validation errors in {f.__name__}: {errors}"
                )
                return jsonify({
                    "error": "Dados de pagamento inv√°lidos",
                    "details": errors
                }), 400

            return f(*args, **kwargs)

        except Exception as e:
            logger.error(f"Error in payment validation: {str(e)}")
            return jsonify({"error": "Erro interno do servidor"}), 500

    return decorated_function


def validate_mercado_pago_webhook(f):
    """Decorator para validar webhooks do MercadoPago"""
    @wraps(f)
    def decorated_function(*args, **kwargs):
        try:
            data = request.get_json()

            if not data:
                return jsonify({"error": "Dados n√£o fornecidos"}), 400

            errors = []

            # Valida√ß√µes b√°sicas do webhook
            if 'type' in data:
                # Verificar se √© um tipo v√°lido de notifica√ß√£o
                valid_types = ['payment', 'plan', 'subscription', 'invoice']
                if data['type'] not in valid_types:
                    errors.append(
                        f"Tipo de notifica√ß√£o inv√°lido: {data['type']}"
                    )

            if 'action' in data:
                valid_actions = [
                    'payment.created', 'payment.updated', 'payment.cancelled'
                ]
                if data['action'] not in valid_actions:
                    errors.append(f"A√ß√£o inv√°lida: {data['action']}")

            if 'data' in data and 'id' in data['data']:
                # Verificar se o ID √© um n√∫mero v√°lido
                try:
                    int(data['data']['id'])
                except (ValueError, TypeError):
                    errors.append("ID do pagamento inv√°lido")
            else:
                errors.append("ID do pagamento n√£o fornecido")

            # Valida√ß√£o adicional baseada no t√≥pico
            if 'topic' in data:
                valid_topics = [
                    'payment', 'merchant_order', 'preapproval',
                    'authorized_payment'
                ]
                if data['topic'] not in valid_topics:
                    errors.append(f"T√≥pico inv√°lido: {data['topic']}")

            if errors:
                logger.warning(f"Webhook validation errors: {errors}")
                return jsonify({
                    "error": "Webhook inv√°lido",
                    "details": errors
                }), 400

            return f(*args, **kwargs)

        except Exception as e:
            logger.error(f"Error in webhook validation: {str(e)}")
            return jsonify({"error": "Erro interno do servidor"}), 500

    return decorated_function


def validate_pix_payment_data(
    pix_data: Dict[str, Any]
) -> Tuple[bool, List[str]]:
    """Valida dados espec√≠ficos para pagamento PIX"""
    errors = []

    # Validar expira√ß√£o do PIX (se fornecida)
    if 'expiration_date' in pix_data:
        try:
            expiry = datetime.fromisoformat(pix_data['expiration_date'])
            if expiry <= datetime.now():
                errors.append("Data de expira√ß√£o do PIX deve ser futura")
        except (ValueError, TypeError):
            errors.append("Formato de data de expira√ß√£o inv√°lido")

    return len(errors) == 0, errors


def validate_boleto_payment_data(
    boleto_data: Dict[str, Any]
) -> Tuple[bool, List[str]]:
    """Valida dados espec√≠ficos para pagamento com boleto"""
    errors = []

    # Validar data de vencimento do boleto (se fornecida)
    if 'due_date' in boleto_data:
        try:
            due_date = datetime.fromisoformat(boleto_data['due_date'])
            if due_date <= datetime.now():
                errors.append("Data de vencimento do boleto deve ser futura")

            # M√°ximo de 30 dias para vencimento
            max_date = datetime.now() + timedelta(days = 30)
            if due_date > max_date:
                errors.append(
                    "Data de vencimento n√£o pode ser superior a 30 dias"
                )
        except (ValueError, TypeError):
            errors.append("Formato de data de vencimento inv√°lido")

    return len(errors) == 0, errors


def validate_card_token_data(
    card_data: Dict[str, Any]
) -> Tuple[bool, List[str]]:
    """Valida dados para cria√ß√£o de token de cart√£o"""
    errors = []

    required_fields = [
        'card_number', 'expiry_month', 'expiry_year', 'cvv', 'cardholder_name'
    ]

    for field in required_fields:
        if field not in card_data or not card_data[field]:
            errors.append(f"Campo '{field}' √© obrigat√≥rio")

    if not errors:
        # Validar n√∫mero do cart√£o
        card_valid, card_error = MercadoPagoValidator.validate_card_number(
            card_data['card_number']
        )
        if not card_valid:
            errors.append(card_error)

        # Validar data de expira√ß√£o
        try:
            month = int(card_data['expiry_month'])
            year = int(card_data['expiry_year'])
            expiry_valid, expiry_error = (
                MercadoPagoValidator.validate_expiry_date(
                    month, year
                )
            )
            if not expiry_valid:
                errors.append(expiry_error)
        except (ValueError, TypeError):
            errors.append("Data de expira√ß√£o inv√°lida")

        # Validar CVV
        cvv_valid, cvv_error = MercadoPagoValidator.validate_cvv(
            card_data['cvv']
        )
        if not cvv_valid:
            errors.append(cvv_error)

        # Validar nome do portador
        if len(card_data['cardholder_name'].strip()) < 2:
            errors.append("Nome do portador deve ter pelo menos 2 caracteres")

    return len(errors) == 0, errors


def validate_marketplace_data(
    marketplace_data: Dict[str, Any]
) -> Tuple[bool, List[str]]:
    """Valida dados espec√≠ficos para marketplace"""
    errors = []

    if 'collector_id' in marketplace_data:
        try:
            int(marketplace_data['collector_id'])
        except (ValueError, TypeError):
            errors.append("ID do coletor deve ser um n√∫mero")

    if 'marketplace_fee' in marketplace_data:
        try:
            fee = float(marketplace_data['marketplace_fee'])
            if fee < 0 or fee > 100:
                errors.append("Taxa do marketplace deve estar entre 0 e 100%")
        except (ValueError, TypeError):
            errors.append("Taxa do marketplace inv√°lida")

    return len(errors) == 0, errors
