#!/usr/bin/env python3
"""
Diagn√≥stico do Sistema de Notifica√ß√µes
Valida a integridade e identifica problemas espec√≠ficos
"""

import os
import sys
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def main():
    print("üîç [DIAGN√ìSTICO] Sistema de Notifica√ß√µes - Mestres do Caf√©")
    print("=" * 60)
    
    # 1. Verificar exist√™ncia do servi√ßo de notifica√ß√µes
    print("\n1Ô∏èreds VERIFICANDO SERVI√áO DE NOTIFICA√á√ïES:")
    service_path = "services/notification_service.py"
    if os.path.exists(service_path):
        print(f"‚úÖ Arquivo {service_path} existe")
        try:
            from services.notification_service import NotificationService, NotificationType, NotificationChannel
            print("‚úÖ Classes NotificationService, NotificationType, NotificationChannel importadas com sucesso")
        except ImportError as e:
            print(f"‚ùå ERRO DE IMPORTA√á√ÉO: {e}")
    else:
        print(f"‚ùå PROBLEMA CR√çTICO: Arquivo {service_path} N√ÉO EXISTE")
        print("üîç CAUSA CONFIRMADA: Servi√ßo de notifica√ß√£o ausente")
    
    # 2. Verificar modelos de notifica√ß√£o
    print("\n2Ô∏è‚É£ VERIFICANDO MODELOS DE NOTIFICA√á√ÉO:")
    try:
        from models.notifications import Notification, NotificationTemplate, NotificationSubscription, NotificationLog
        print("‚úÖ Todos os modelos de notifica√ß√£o importados com sucesso")
        print(f"   - Notification: {Notification}")
        print(f"   - NotificationTemplate: {NotificationTemplate}")
        print(f"   - NotificationSubscription: {NotificationSubscription}")
        print(f"   - NotificationLog: {NotificationLog}")
    except ImportError as e:
        print(f"‚ùå ERRO na importa√ß√£o de modelos: {e}")
    
    # 3. Verificar controllers de notifica√ß√£o
    print("\n3Ô∏è‚É£ VERIFICANDO CONTROLLERS DE NOTIFICA√á√ÉO:")
    try:
        # Vamos tentar importar sem o servi√ßo
        import importlib.util
        spec = importlib.util.spec_from_file_location("notifications_controller", "controllers/routes/notifications.py")
        if spec and spec.loader:
            print("‚úÖ Controller de notifica√ß√µes encontrado")
            print("‚ùå MAS: Importa√ß√£o falhar√° devido ao servi√ßo ausente")
        else:
            print("‚ùå Controller de notifica√ß√µes n√£o encontrado")
    except Exception as e:
        print(f"‚ùå ERRO ao verificar controller: {e}")
    
    # 4. Verificar registro do blueprint
    print("\n4Ô∏è‚É£ VERIFICANDO REGISTRO DO BLUEPRINT:")
    try:
        with open("app.py", "r") as f:
            app_content = f.read()
            if "notifications_bp" in app_content and "# " in app_content:
                print("‚ùå PROBLEMA CONFIRMADO: notifications_bp est√° comentado no app.py")
                print("üîç CAUSA CONFIRMADA: Blueprint desabilitado")
            elif "notifications_bp" in app_content:
                print("‚úÖ notifications_bp encontrado no app.py")
            else:
                print("‚ùå notifications_bp n√£o encontrado no app.py")
    except Exception as e:
        print(f"‚ùå ERRO ao verificar app.py: {e}")
    
    # 5. Verificar estrutura do banco de dados
    print("\n5Ô∏è‚É£ VERIFICANDO ESTRUTURA DO BANCO:")
    try:
        from database import db
        from app import create_app
        
        app = create_app()
        with app.app_context():
            # Verificar se as tabelas existem
            inspector = db.inspect(db.engine)
            existing_tables = inspector.get_table_names()
            
            notification_tables = ['notifications', 'notification_templates', 'notification_subscriptions', 'notification_logs']
            
            for table in notification_tables:
                if table in existing_tables:
                    print(f"‚úÖ Tabela {table} existe no banco")
                else:
                    print(f"‚ùå Tabela {table} N√ÉO EXISTE no banco")
    except Exception as e:
        print(f"‚ùå ERRO ao verificar banco: {e}")
    
    # 6. Resumo do diagn√≥stico
    print("\n" + "=" * 60)
    print("üìã RESUMO DO DIAGN√ìSTICO:")
    print("‚ùå PROBLEMA CR√çTICO: Servi√ßo de notifica√ß√£o ausente (notification_service.py)")
    print("‚ùå PROBLEMA CR√çTICO: Blueprint de notifica√ß√µes desabilitado")
    print("‚ö†Ô∏è  IMPACTO: Sistema de notifica√ß√µes completamente inoperante")
    print("üí° SOLU√á√ÉO: Implementar servi√ßo de notifica√ß√µes e reativar blueprint")
    print("=" * 60)

if __name__ == "__main__":
    main()