# Mestres do Café - Docker Compose Configuration
# Ambiente completo para desenvolvimento e produção

version: '3.8'

services:
  # =============================================================================
  # Database - PostgreSQL
  # =============================================================================
  db:
    image: postgres:15-alpine
    container_name: mestres_cafe_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: mestres_cafe
      POSTGRES_USER: kalleby
      POSTGRES_PASSWORD: ${DB_PASSWORD:-mestres123}
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      - mestres_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kalleby -d mestres_cafe"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # =============================================================================
  # Redis - Cache e Sessions
  # =============================================================================
  redis:
    image: redis:7-alpine
    container_name: mestres_cafe_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis123}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - mestres_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 20s

  # =============================================================================
  # API Backend - Flask
  # =============================================================================
  api:
    build:
      context: ./apps/api
      dockerfile: Dockerfile
      target: ${BUILD_TARGET:-development}
    container_name: mestres_cafe_api
    restart: unless-stopped
    environment:
      # Database
      DATABASE_URL: postgresql://kalleby:${DB_PASSWORD:-mestres123}@db:5432/mestres_cafe
      
      # Flask
      FLASK_ENV: ${FLASK_ENV:-development}
      FLASK_DEBUG: ${FLASK_DEBUG:-1}
      
      # Security
      SECRET_KEY: ${SECRET_KEY:-dev-secret-key-mercadopago-tests}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-dev-jwt-secret-key-123}
      
      # Mercado Pago
      MERCADO_PAGO_ACCESS_TOKEN: ${MERCADO_PAGO_ACCESS_TOKEN}
      MERCADO_PAGO_PUBLIC_KEY: ${MERCADO_PAGO_PUBLIC_KEY}
      MERCADO_PAGO_ENVIRONMENT: ${MERCADO_PAGO_ENVIRONMENT:-sandbox}
      MERCADO_PAGO_WEBHOOK_SECRET: ${MERCADO_PAGO_WEBHOOK_SECRET}
      MERCADO_PAGO_NOTIFICATION_URL: ${MERCADO_PAGO_NOTIFICATION_URL}
      
      # Melhor Envio
      MELHOR_ENVIO_API_KEY: ${MELHOR_ENVIO_API_KEY}
      MELHOR_ENVIO_ENVIRONMENT: ${MELHOR_ENVIO_ENVIRONMENT:-sandbox}
      MELHOR_ENVIO_CLIENT_ID: ${MELHOR_ENVIO_CLIENT_ID}
      MELHOR_ENVIO_CLIENT_SECRET: ${MELHOR_ENVIO_CLIENT_SECRET}
      MELHOR_ENVIO_REDIRECT_URI: ${MELHOR_ENVIO_REDIRECT_URI}
      
      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis123}@redis:6379/0
      
      # API Config
      API_PORT: 5001
      CORS_ORIGINS: http://localhost:3000,http://localhost:5173,http://web:3000
      
      # Monitoring
      DEBUG: ${DEBUG:-True}
      TESTING: ${TESTING:-False}
    volumes:
      - ./apps/api:/app
      - api_uploads:/app/uploads
      - api_logs:/app/logs
    ports:
      - "${API_PORT:-5001}:5001"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - mestres_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # =============================================================================
  # Frontend Web - React + Vite
  # =============================================================================
  web:
    build:
      context: ./apps/web
      dockerfile: Dockerfile
      target: ${WEB_BUILD_TARGET:-development}
    container_name: mestres_cafe_web
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      VITE_API_URL: ${VITE_API_URL:-http://localhost:5001/api}
      VITE_APP_NAME: "Mestres do Café"
      VITE_MERCADO_PAGO_PUBLIC_KEY: ${MERCADO_PAGO_PUBLIC_KEY}
      PORT: 3000
    volumes:
      - ./apps/web:/app
      - /app/node_modules
      - web_dist:/app/dist
    ports:
      - "${WEB_PORT:-3000}:3000"
    depends_on:
      api:
        condition: service_healthy
    networks:
      - mestres_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # =============================================================================
  # Nginx - Reverse Proxy e Load Balancer (Produção)
  # =============================================================================
  nginx:
    image: nginx:alpine
    container_name: mestres_cafe_nginx
    restart: unless-stopped
    profiles: ["production"]
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - web_dist:/usr/share/nginx/html:ro
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    depends_on:
      - api
      - web
    networks:
      - mestres_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================================================
  # Monitoring - Prometheus (Opcional)
  # =============================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: mestres_cafe_prometheus
    restart: unless-stopped
    profiles: ["monitoring"]
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    networks:
      - mestres_network

  # =============================================================================
  # Monitoring - Grafana (Opcional)
  # =============================================================================
  grafana:
    image: grafana/grafana:latest
    container_name: mestres_cafe_grafana
    restart: unless-stopped
    profiles: ["monitoring"]
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123}
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    depends_on:
      - prometheus
    networks:
      - mestres_network

# =============================================================================
# Networks
# =============================================================================
networks:
  mestres_network:
    driver: bridge
    name: mestres_cafe_network

# =============================================================================
# Volumes
# =============================================================================
volumes:
  postgres_data:
    driver: local
    name: mestres_cafe_postgres_data
  
  redis_data:
    driver: local
    name: mestres_cafe_redis_data
  
  api_uploads:
    driver: local
    name: mestres_cafe_api_uploads
  
  api_logs:
    driver: local
    name: mestres_cafe_api_logs
  
  web_dist:
    driver: local
    name: mestres_cafe_web_dist
  
  prometheus_data:
    driver: local
    name: mestres_cafe_prometheus_data
  
  grafana_data:
    driver: local
    name: mestres_cafe_grafana_data