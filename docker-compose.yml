version: '3.8'

services:
  # Frontend React
  web:
    build:
      context: ./apps/web
      dockerfile: Dockerfile
      target: development
    ports:
      - "3000:3000"
    volumes:
      - ./apps/web:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - VITE_API_URL=http://localhost:5001/api
    depends_on:
      - api
    networks:
      - mestres-network
    restart: unless-stopped

  # Backend Flask API
  api:
    build:
      context: ./apps/api
      dockerfile: Dockerfile
      target: development
    ports:
      - "5001:5001"
    volumes:
      - ./apps/api:/app
      - ./data:/app/data
    environment:
      - FLASK_ENV=development
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/mestres_cafe
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=dev-secret-key
      - JWT_SECRET_KEY=dev-jwt-secret
      - PORT=5001
    depends_on:
      - db
      - redis
    networks:
      - mestres-network
    restart: unless-stopped

  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=mestres_cafe
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./tools/docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - mestres-network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - mestres-network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    build:
      context: ./tools/docker/nginx
      dockerfile: Dockerfile
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./tools/docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./tools/docker/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - web
      - api
    networks:
      - mestres-network
    restart: unless-stopped

  # Adminer (Database Admin)
  adminer:
    image: adminer:latest
    ports:
      - "8080:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=db
    depends_on:
      - db
    networks:
      - mestres-network
    restart: unless-stopped
    profiles:
      - tools

  # Redis Commander (Redis Admin)
  redis-commander:
    image: rediscommander/redis-commander:latest
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
    depends_on:
      - redis
    networks:
      - mestres-network
    restart: unless-stopped
    profiles:
      - tools

  # Mailhog (Email Testing)
  mailhog:
    image: mailhog/mailhog:latest
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - mestres-network
    restart: unless-stopped
    profiles:
      - tools

  # Prometheus (Monitoring)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./tools/docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - mestres-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana (Dashboards)
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./tools/docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./tools/docker/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - mestres-network
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  mestres-network:
    driver: bridge

