# Mestres do Café Enterprise - Docker Compose
# Configuração otimizada para desenvolvimento e produção

version: '3.8'

# =============================================================================
# Serviços Principais
# =============================================================================
services:
  # Frontend React (Desenvolvimento)
  web:
    build:
      context: ./apps/web
      dockerfile: Dockerfile
      target: development
    container_name: mestres_cafe_web
    ports:
      - "${WEB_PORT:-3000}:3000"
    volumes:
      - ./apps/web:/app:cached
      - /app/node_modules
      - web_cache:/app/.vite
    environment:
      - NODE_ENV=development
      - VITE_API_URL=http://localhost:${API_PORT:-5001}/api
      - VITE_APP_NAME=Mestres do Café
      - PORT=3000
      - CHOKIDAR_USEPOLLING=true
    depends_on: []
    networks:
      - mestres-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Backend Flask API
  api:
    build:
      context: ./apps/api
      dockerfile: Dockerfile
      target: development
    container_name: mestres_cafe_api
    ports:
      - "${API_PORT:-5001}:5001"
    volumes:
      - ./apps/api:/app:cached
      - api_logs:/app/logs
      - api_uploads:/app/uploads
      - api_instance:/app/instance
    environment:
      - FLASK_ENV=development
      - FLASK_DEBUG=1
      - DATABASE_URL=postgresql://${DB_USER:-postgres}:${DB_PASSWORD:-postgres}@db:5432/${DB_NAME:-mestres_cafe}
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-dev-secret-key-muito-longo-para-desenvolvimento}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-dev-jwt-secret-muito-longo-para-desenvolvimento}
      - PORT=5001
      - PYTHONPATH=/app/src
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - mestres-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: mestres_cafe_db
    ports:
      - "${DB_PORT:-5432}:5432"
    environment:
      - POSTGRES_DB=${DB_NAME:-mestres_cafe}
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-postgres}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=pt_BR.UTF-8 --lc-ctype=pt_BR.UTF-8
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./tools/docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - mestres-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-mestres_cafe}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: mestres_cafe_redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: >
      redis-server 
      --appendonly yes 
      --appendfsync everysec 
      --maxmemory 512mb 
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 60
    volumes:
      - redis_data:/data
    networks:
      - mestres-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 20s

  # Nginx Reverse Proxy
  nginx:
    build:
      context: ./tools/docker/nginx
      dockerfile: Dockerfile
    container_name: mestres_cafe_nginx
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./tools/docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - nginx_logs:/var/log/nginx
      - nginx_cache:/var/cache/nginx
    depends_on:
      web:
        condition: service_healthy
    networks:
      - mestres-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health.html"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

# =============================================================================
# Serviços de Ferramentas (Profile: tools)
# =============================================================================
  # Adminer (Database Admin)
  adminer:
    image: adminer:latest
    container_name: mestres_cafe_adminer
    ports:
      - "${ADMINER_PORT:-8080}:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=db
      - ADMINER_DESIGN=pepa-linha-dark
    depends_on:
      db:
        condition: service_healthy
    networks:
      - mestres-network
    restart: unless-stopped
    profiles:
      - tools
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Commander (Redis Admin)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: mestres_cafe_redis_commander
    ports:
      - "${REDIS_COMMANDER_PORT:-8081}:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
      - HTTP_USER=${REDIS_COMMANDER_USER:-admin}
      - HTTP_PASSWORD=${REDIS_COMMANDER_PASSWORD:-admin}
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - mestres-network
    restart: unless-stopped
    profiles:
      - tools
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://127.0.0.1:8081/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Mailhog (Email Testing)
  mailhog:
    image: mailhog/mailhog:latest
    container_name: mestres_cafe_mailhog
    ports:
      - "${MAILHOG_SMTP_PORT:-1025}:1025"  # SMTP
      - "${MAILHOG_WEB_PORT:-8025}:8025"   # Web UI
    networks:
      - mestres-network
    restart: unless-stopped
    profiles:
      - tools
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8025/"]
      interval: 30s
      timeout: 10s
      retries: 3

# =============================================================================
# Serviços de Monitoramento (Profile: monitoring)
# =============================================================================
  # Prometheus (Metrics)
  prometheus:
    image: prom/prometheus:latest
    container_name: mestres_cafe_prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./tools/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    networks:
      - mestres-network
    restart: unless-stopped
    profiles:
      - monitoring
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana (Dashboards)
  grafana:
    image: grafana/grafana:latest
    container_name: mestres_cafe_grafana
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./tools/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./tools/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - mestres-network
    restart: unless-stopped
    profiles:
      - monitoring
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

# =============================================================================
# Volumes Persistentes
# =============================================================================
volumes:
  postgres_data:
    driver: local
    name: mestres_cafe_postgres_data
  redis_data:
    driver: local
    name: mestres_cafe_redis_data
  prometheus_data:
    driver: local
    name: mestres_cafe_prometheus_data
  grafana_data:
    driver: local
    name: mestres_cafe_grafana_data
  api_logs:
    driver: local
    name: mestres_cafe_api_logs
  api_uploads:
    driver: local
    name: mestres_cafe_api_uploads
  api_instance:
    driver: local
    name: mestres_cafe_api_instance
  web_cache:
    driver: local
    name: mestres_cafe_web_cache
  nginx_logs:
    driver: local
    name: mestres_cafe_nginx_logs
  nginx_cache:
    driver: local
    name: mestres_cafe_nginx_cache

# =============================================================================
# Redes
# =============================================================================
networks:
  mestres-network:
    driver: bridge
    name: mestres_cafe_network
    ipam:
      config:
        - subnet: 172.20.0.0/16